import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd
import numpy as np

# Import Data from file
df = pd.read_csv("C:/Users/Carla/Desktop/Stage-Ladhyx/P8 Post-cur-formatted-mesh nZxy.txt",sep='\t')

#Cleaning
indexNames = df[ (df['Y']<-12500) ].index
df.drop(indexNames , inplace=True)

# Random point selection
random_point = df.sample(n=1, random_state=1)
# Random point coordinates
random_x = random_point['X'].values[0]
random_y = random_point['Y'].values[0]
random_z = random_point['Z'].values[0]

# Filtering points close to the random point
distance_threshold = 3000# Set the appropriate threshold (seuil) distance

filtered_df = df[np.sqrt((df['X'] - random_x)**2 + (df['Y'] - random_y)**2) <= distance_threshold]

# Calculate distances from the random point to the filtered points
distances = np.sqrt((filtered_df['X'] - random_x)**2 + (filtered_df['Y'] - random_y)**2 + (filtered_df['Z'] - random_z)**2)

# Find the farthest filtered point from the random point
farthest_point = filtered_df.loc[distances.idxmax()]

# Coordinates of the farthest point
farthest_x = farthest_point['X']
farthest_y = farthest_point['Y']
farthest_z = farthest_point['Z']

# Display coordinates of the farthest point
print(f"Coordinates of the farthest point from the random point:")
print(f"X={farthest_x}, Y={farthest_y}, Z={farthest_z}")

# Average plan calculation
A = filtered_df['X']
B = filtered_df['Y']
C = filtered_df['Z']

# Creating the data matrix
onesVec=np.ones(len(C))
data_matrix = np.column_stack((A, B, onesVec))

# Calculating plan coefficients
coefficients = np.linalg.lstsq(data_matrix, C, rcond=None)[0]

# Equation of the plane : Ax + By + Cz + D = 0
A_plan, B_plan, D_plan = coefficients[:3]
C_plan = 1.0

# Results display
print(f"Random point coordinates: (X={random_x}, Y={random_y}, Z={random_z})")
print(f"Mean plane equation: {A_plan}x + {B_plan}y + {C_plan}z + {D_plan} = 0")

# Plot
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

# Data points
ax.scatter3D(A, B, C, c=C, label='Data points')

# Plan points
x_plane, y_plane = np.meshgrid(np.linspace(min(A), max(A), 10), np.linspace(min(B), max(B), 10))
z_plane = (+A_plan * x_plane + B_plan * y_plane + D_plan) / C_plan
ax.plot_surface(x_plane, y_plane, z_plane, alpha=0.5)

# Calculate the normal vector to the plane
normal_vector = np.array([-A_plan, -B_plan, 1])
normalized_normal_vector = normal_vector / np.linalg.norm(normal_vector)
 
vertical_vector = np.array([0, 0, 1])  # Vertical vector
angle = np.arccos(np.dot(normal_vector, vertical_vector) /
                      (np.linalg.norm(normal_vector) * np.linalg.norm(vertical_vector)))
angle_degrees = np.degrees(angle)
print(f"Angle: {angle_degrees} degrees")

# X and y components of the normal vecteur
normal_vector_x=-A_plan
normal_vector_y=-B_plan

print(f"x component of the normal vecteur normalized: {normal_vector_x/np.linalg.norm(normal_vector)}")
print(f"x component of the normal vecteur normalized: {normal_vector_y/np.linalg.norm(normal_vector)}")

# Define the start and end points of the normal vector
center_point = np.array([np.mean(A), np.mean(B), np.mean(C)])

start_point = center_point - 800 * normalized_normal_vector# Adjust the length of the vector

end_point = center_point + 800 * normalized_normal_vector

# Plot the normal vector
ax.plot3D([start_point[0], end_point[0]], [start_point[1], end_point[1]], [start_point[2], end_point[2]],
          color='r', linewidth=4, label='Normal vector')
# Random point
ax.scatter3D(random_x, random_y, random_z, c='r', s=100, label='Random point')

# Farthest filtered point
ax.scatter3D(farthest_x, farthest_y, farthest_z, c='g', s=100, label='Farthest filtered point')

ax.set_xlabel('X', fontsize=12)
ax.set_ylabel('Y', fontsize=12)
ax.set_zlabel('Z', fontsize=12)

ax.view_init(elev=0, azim=180)
ax.legend()
plt.show()
